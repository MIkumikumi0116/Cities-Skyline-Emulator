[
  {
    "name": "move_forward",
    "code": "def move_forward(duration):\n    \"\"\"\n    Moves the camera forward in the game at a specified distance.\n\n    Parameters:\n    - duration: The duration in seconds for which the character should move forward.\n    \"\"\"\n    data = {'action': 'Move_Camera',     'pos_x': 100,     'pos_y': 0,     'pos_z': 0,     'relative_to_camera': True }\n    game_api.send(data)\n    post_skill_wait(duration)\n",
    "code_description": "This code defines a function called move_forward, which moves the camera forward in the game for a specified duration."
  },
  {
    "name": "move_back",
    "code": "def move_back(duration):\n    \"\"\"\n    Moves the camera backward in the game at a specified distance.\n\n    Parameters:\n    - duration: The duration in seconds for which the character should move backward.\n    \"\"\"\n    data = {'action': 'Move_Camera',     'pos_x': -100,     'pos_y': 0,     'pos_z': 0,     'relative_to_camera': True }\n    game_api.send(data)\n    post_skill_wait(duration)\n",
    "code_description": "This code defines a function called move_back, which moves the camera backward in the game for a specified duration."
  },
  {
    "name": "move_left",
    "code": "def move_left(duration):\n    \"\"\"\n    Moves the camera to the left in the game at a specified distance.\n\n    Parameters:\n    - duration: The duration in seconds for which the character should move to the left.\n    \"\"\"\n    data = {'action': 'Move_Camera',     'pos_x': 0,     'pos_y': 0,     'pos_z': -100,     'relative_to_camera': True }\n    game_api.send(data)\n    post_skill_wait(duration)\n",
    "code_description": "This code defines a function called move_left, which moves the camera to the left in the game for a specified duration."
  },
  {
    "name": "move_right",
    "code": "def move_right(duration):\n    \"\"\"\n    Moves the camera to the right in the game at a specified distance.\n\n    Parameters:\n    - duration: The duration in seconds for which the character should move to the right.\n    \"\"\"\n    data = {'action': 'Move_Camera',     'pos_x': 0,     'pos_y': 0,     'pos_z': 100,     'relative_to_camera': True }\n    game_api.send(data)\n    post_skill_wait(duration)\n",
    "code_description": "This code defines a function called move_right, which moves the camera to the right in the game for a specified duration."
  },
  {
    "name": "Build_Straight_Road",
    "code": "def Build_Straight_Road(action, start_x, start_z, end_x, end_z, prefab_id) -> tuple[str]:\n    \"\"\"\n    Construct a straight road between the specified starting point and endpoint according to the style specified by prefab_id\n\n    Parameters:\n- action: string, \"Build_Straight_Road\"\n        - start_x: float, start x coordinate of the road\n        - start_z: float, start z coordinate of the road\n        - end_x: float, end x coordinate of the road\n        - end_z: float, end z coordinate of the road\n        - prefab_id: int, prefab id of road to be built, check Road Prefab Table for detail\n   Return:\n- status: string, \"ok\" or \"error\"        - message: string, succeed: \"success\"; failed: error message\"\"\"\n   data = {\n       \"action\": \"Build_Straight_Road\",\n       \"start_x\": 0,\n       \"start_z\": 0,\n       \"end_x\": 100,\n       \"end_z\": 100,\n       \"prefab_id\": 89\n   }\n   game_api.send(data)\n",
    "code_description": "This code defines a function called Build_Straight_Road that constructs a straight road between the specified starting point and endpoint according to the style specified by prefab_id."
  },
  {
    "name": "Create_Building",
    "code": "def Create_Building(action, pox_x, pox_z, angle, prefab_id) -> tuple[str]:\n    \"\"\"\n    Construct a specified building at the designated location and orientation.\n\n    Parameters:\n- action: string, \"Create_Building\"\n        - pox_x: int, x coordinate of the building\n        - pox_z: int, z coordinate of the building\n        - angle: float, building orientation expressed in radians\n        - prefab_id: int, prefab id of building to be built, check Building Prefab Table for detail\n   Return:\n- status: string, \"ok\" or \"error\"        - message: string, succeed: \"success\"; failed: error message\"\"\"\n   data = {\n       \"action\": \"Create_Building\",\n       \"pox_x\": 0,\n       \"pox_z\": 0,\n       \"angle\": 0,\n       \"prefab_id\": 1\n   }\n   game_api.send(data)\n",
    "code_description": "This code defines a function called Create_Building that constructs a specified building at the designated location and orientation."
  },
  {
    "name": "Get_Camera_Position",
    "code": "def Get_Camera_Position(action) -> tuple[str, float]:\n    \"\"\"\n    Get the current position coordinates (x, y, z) of the camera, unit: meters\n\n    Parameters:\n- action: string, \"Get_Camera_Position\"\n   Return:\n- status: string, \"ok\" or \"error\"        - message: string, succeed: \"success\"; failed: error message        - pos_x: float, camera's x coordinate        - pos_y: float, ~        - pos_z: float, ~\"\"\"\n   data = {\n       \"action\": \"Get_Camera_Position\"\n   }\n   game_api.send(data)\n",
    "code_description": "This code defines a function called Get_Camera_Position that gets the current position coordinates (x, y, z) of the camera."
  },
  {
    "name": "Get_Camera_Rotation",
    "code": "def Get_Camera_Rotation(action) -> tuple[str, float]:\n    \"\"\"\n    Get the camera's orientation (horizontal and pitch angles), angle in degrees\n\n    Parameters:\n- action: string, \"Get_Camera_Rotation\"\n   Return:\n- status: string, \"ok\" or \"error\"        - message: string, succeed: \"success\"; failed: error message        - rot_yaw: float, horizontal angle        - rot_pitch: float, pitch angle\"\"\"\n   data = {\n       \"action\": \"Get_Camera_Rotation\"\n   }\n   game_api.send(data)\n",
    "code_description": "This code defines a function called Get_Camera_Rotation that gets the camera's orientation (horizontal and pitch angles)."
  },
  {
    "name": "Move_Camera",
    "code": "def Move_Camera(action, pos_x, pos_y, pos_z, relative_to_camera) -> tuple[str]:\n    \"\"\"\n    Specify a vector (x, y, z) to move the camera by, in world coordinates or local coordinates (determined by the camera's orientation)\n\n    Parameters:\n- action: string, \"Move_Camera\"\n        - pos_x: float, movement vector's x coordinate        - pos_y: float, ~        - pos_z: float, ~        - relative_to_camera: bool, true: move based on the camera's local coordinate system; false: move based on the world coordinate system\n   Return:\n- status: string, \"ok\" or \"error\"        - message: string, succeed: \"success\"; failed: error message\"\"\"\n   data = {\n       \"action\": \"Move_Camera\",\n       \"pos_x\": 0,\n       \"pos_y\": 0,\n       \"pos_z\": 0,\n       \"relative_to_camera\": true\n   }\n   game_api.send(data)\n",
    "code_description": "This code defines a function called Move_Camera that specifies a vector (x, y, z) to move the camera by, in world coordinates or local coordinates."
  },
  {
    "name": "Rotate_Camera",
    "code": "def Rotate_Camera(action, rot_yaw, rot_pitch) -> tuple[str]:\n    \"\"\"\n    Specify horizontal and pitch rotation angles (in degrees) to rotate the camera\n\n    Parameters:\n- action: string, \"Rotate_Camera\"\n        - rot_yaw: float, horizontal rotation angle        - rot_pitch: float, pitch rotation angle\n   Return:\n- status: string, \"ok\" or \"error\"        - message: string, succeed: \"success\"; failed: error message\"\"\"\n   data = {\n       \"action\": \"Rotate_Camera\",\n       \"rot_yaw\": 0,\n       \"rot_pitch\": 0\n   }\n   game_api.send(data)\n",
    "code_description": "This code defines a function called Rotate_Camera that specifies horizontal and pitch rotation angles (in degrees) to rotate the camera."
  },
  {
    "name": "Set_Camera_Position",
    "code": "def Set_Camera_Position(action, pos_x, pos_y, pos_z) -> tuple[str]:\n    \"\"\"\n    Specify a coordinate (x, y, z) in world coordinates to move the camera to the specific location\n\n    Parameters:\n- action: string, \"Set_Camera_Position\"\n        - pos_x: float, target position x coordinate        - pos_y: float, ~        - pos_z: float, ~\n   Return:\n- status: string, \"ok\" or \"error\"        - message: string, succeed: \"success\"; failed: error message\"\"\"\n   data = {\n       \"action\": \"Set_Camera_Position\",\n       \"pos_x\": 0,\n       \"pos_y\": 0,\n       \"pos_z\": 0\n   }\n   game_api.send(data)\n",
    "code_description": "This code defines a function called Set_Camera_Position that specifies a coordinate (x, y, z) in world coordinates to move the camera to the specific location."
  },
  {
    "name": "Set_Camera_Rotation",
    "code": "def Set_Camera_Rotation(action, rot_yaw, rot_pitch) -> tuple[str]:\n    \"\"\"\n    Specify horizontal and pitch angles (in world coordinates) to rotate the camera to the specific orientation\n\n    Parameters:\n- action: string, \"Set_Camera_Rotation\"\n        - rot_yaw: float, horizontal angle        - rot_pitch: float, pitch angle\n   Return:\n- status: string, \"ok\" or \"error\"        - message: string, succeed: \"success\"; failed: error message\"\"\"\n   data = {\n       \"action\": \"Set_Camera_Rotation\",\n       \"rot_yaw\": 0,\n       \"rot_pitch\": 0\n   }\n   game_api.send(data)\n",
    "code_description": "This code defines a function called Set_Camera_Rotation that specifies horizontal and pitch angles (in world coordinates) to rotate the camera to the specific orientation."
  },
  {
    "name": "Get_Screen_Shot",
    "code": "def Get_Screen_Shot(action) -> tuple[str]:\n    \"\"\"\n    Capture a complete screenshot of the game, including the scenery and UI\n\n    Parameters:\n- action: string, \"Get_Screen_Shot\"\n   Return:\n- status: string, \"ok\" or \"error\"        - message: string, succeed: \"success\"; failed: error message        - screen_shot_base64: string, base64 encoding of a png image\"\"\"\n   data = {\n       \"action\": \"Get_Screen_Shot\"\n   }\n   game_api.send(data)\n",
    "code_description": "This code defines a function called Get_Screen_Shot that captures a complete screenshot of the game, including the scenery and UI."
  }
]