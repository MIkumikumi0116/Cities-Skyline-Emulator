[
    {
        "name": "Build_Straight_Road",
        "code": "def Build_Straight_Road(action, start_x, start_z, end_x, end_z, prefab_id) -> tuple[str]:\n    \"\"\"\n    Construct a straight road between the specified starting point and endpoint according to the style specified by prefab_id\n        action: string, \"Build_Straight_Road\"\n        start_x: float, start x coordinate of the road\n        start_z: float, ~\n        end_x: float, ~\n        end_z: float, ~\n        prefab_id: int, prefab id of road to be built, check Road Prefab Table for detail\n    Return:\n        status: string, \"ok\" or \"error\"\n        message: string, succeed: \"success\"; failed: error message\n    \"\"\"\n\n    data = {\n        \"action\": \"Build_Straight_Road\",\n        \"start_x\": 0,\n        \"start_z\": 0,\n        \"end_x\": 100,\n        \"end_z\": 100,\n        \"prefab_id\": 89\n    }\n\n    game_api.send(data)",
        "code_description": "This code defines a function called Build_Straight_Road that constructs a straight road between the specified starting point and endpoint according to the style specified by prefab_id."
    },
    {
        "name": "Create_Building",
        "code": "def Create_Building(action, pox_x, pox_z, angle, prefab_id) -> tuple[str]:\n    \"\"\"\n    Construct a specified building at the designated location and orientation.\n        action: string, \"Create_Building\"\n        pox_x: float, x coordinate of the building\n        pox_z: float, ~\n        angle: float, building orientation expressed in radians\n        prefab_id: int, prefab id of building to be built, check Building Prefab Table for detail\n    Return:\n        status: string, \"ok\" or \"error\"\n        message: string, succeed: \"success\"; failed: error message\n    \"\"\"\n\n    data = {\n        \"action\": \"Create_Building\",\n        \"pox_x\": 50,\n        \"pox_z\": 50,\n        \"angle\": 0,\n        \"prefab_id\": 100\n    }\n\n    game_api.send(data)",
        "code_description": "This code defines a function called Create_Building that constructs a specified building at the designated location and orientation."
    },
    {
        "name": "Get_Camera_Position",
        "code": "def Get_Camera_Position(action) -> tuple[str]:\n    \"\"\"\n    Get the current position coordinates (x, y, z) of the camera, unit: meters\n        action: string, \"Get_Camera_Position\"\n    Return:\n        status: string, \"ok\" or \"error\"\n        message: string, succeed: \"success\"; failed: error message\n        pos_x: float, camera's x coordinate\n        pos_y: float, ~\n        pos_z: float, ~\n    \"\"\"\n\n    data = {\n        \"action\": \"Get_Camera_Position\"\n    }\n\n    game_api.send(data)",
        "code_description": "This code defines a function called Get_Camera_Position that gets the current position coordinates (x, y, z) of the camera."
    },
    {
        "name": "Get_Camera_Rotation",
        "code": "def Get_Camera_Rotation(action) -> tuple[str]:\n    \"\"\"\n    Get the camera's orientation (horizontal and pitch angles), angle in degrees\n        action: string, \"Get_Camera_Rotation\"\n    Return:\n        status: string, \"ok\" or \"error\"\n        message: string, succeed: \"success\"; failed: error message\n        rot_yaw: float, horizontal angle\n        rot_pitch: float, pitch angle\n    \"\"\"\n\n    data = {\n        \"action\": \"Get_Camera_Rotation\"\n    }\n\n    game_api.send(data)",
        "code_description": "This code defines a function called Get_Camera_Rotation that gets the camera's orientation (horizontal and pitch angles)."
    },
    {
        "name": "Move_Camera",
        "code": "def Move_Camera(action, pos_x, pos_y, pos_z, relative_to_camera) -> tuple[str]:\n    \"\"\"\n    Specify a vector (x, y, z) to move the camera by, in world coordinates or local coordinates (determined by the camera's orientation)\n        action: string, \"Move_Camera\"\n        pos_x: float, movement vector's x coordinate\n        pos_y: float, ~\n        pos_z: float, ~\n        relative_to_camera: bool, true: move based on the camera's local coordinate system; false: move based on the world coordinate system\n    Return:\n        status: string, \"ok\" or \"error\"\n        message: string, succeed: \"success\"; failed: error message\n    \"\"\"\n\n    data = {\n        \"action\": \"Move_Camera\",\n        \"pos_x\": 10,\n        \"pos_y\": 0,\n        \"pos_z\": 0,\n        \"relative_to_camera\": True\n    }\n\n    game_api.send(data)",
        "code_description": "This code defines a function called Move_Camera that specifies a vector (x, y, z) to move the camera by, in world coordinates or local coordinates."
    },
    {
        "name": "Rotate_Camera",
        "code": "def Rotate_Camera(action, rot_yaw, rot_pitch) -> tuple[str]:\n    \"\"\"\n    Specify horizontal and pitch rotation angles (in degrees) to rotate the camera\n        action: string, \"Rotate_Camera\"\n        rot_yaw: float, horizontal rotation angle\n        rot_pitch: float, pitch rotation angle\n    Return:\n        status: string, \"ok\" or \"error\"\n        message: string, succeed: \"success\"; failed: error message\n    \"\"\"\n\n    data = {\n        \"action\": \"Rotate_Camera\",\n        \"rot_yaw\": 90,\n        \"rot_pitch\": 0\n    }\n\n    game_api.send(data)",
        "code_description": "This code defines a function called Rotate_Camera that specifies horizontal and pitch rotation angles to rotate the camera."
    },
    {
        "name": "Set_Camera_Position",
        "code": "def Set_Camera_Position(action, pos_x, pos_y, pos_z) -> tuple[str]:\n    \"\"\"\n    Specify a coordinate (x,y,z) in world coordinates to move the camera to the specific location\n        action: string, \"Set_Camera_Position\"\n        pos_x: float, target position x coordinate\n        pos_y: float, ~\n        pos_z: float, ~\n    Return:\n        status: string, \"ok\" or \"error\"\n        message: string, succeed: \"success\"; failed: error message\n    \"\"\"\n\n    data = {\n        \"action\": \"Set_Camera_Position\",\n        \"pos_x\": 50,\n        \"pos_y\": 0,\n        \"pos_z\": 50\n    }\n\n    game_api.send(data)",
        "code_description": "This code defines a function called Set_Camera_Position that specifies a coordinate in world coordinates to move the camera to the specific location."
    },
    {
        "name": "Set_Camera_Rotation",
        "code": "def Set_Camera_Rotation(action, rot_yaw, rot_pitch) -> tuple[str]:\n    \"\"\"\n    Specify horizontal and pitch angles (in world coordinates) to rotate the camera to the specific orientation\n        action: string, \"Set_Camera_Rotation\"\n        rot_yaw: float, horizontal angle\n        rot_pitch: float, pitch angle\n    Return:\n        status: string, \"ok\" or \"error\"\n        message: string, succeed: \"success\"; failed: error message\n    \"\"\"\n\n    data = {\n        \"action\": \"Set_Camera_Rotation\",\n        \"rot_yaw\": 90,\n        \"rot_pitch\": 0\n    }\n\n    game_api.send(data)",
        "code_description": "This code defines a function called Set_Camera_Rotation that specifies horizontal and pitch angles to rotate the camera to the specific orientation."
    },
    {
        "name": "Set_Pausing",
        "code": "def Set_Pausing(action, pausing) -> tuple[str]:\n    \"\"\"\n    Pause or resume the game\n        action: string, \"Set_Pausing\"\n        pausing: bool, true: pause the game; false: resume the game\n    Return:\n        status: string, \"ok\" or \"error\"\n        message: string, succeed: \"success\"; failed: error message\n    \"\"\"\n\n    data = {\n        \"action\": \"Set_Pausing\",\n        \"pausing\": True\n    }\n\n    game_api.send(data)",
        "code_description": "This code defines a function called Set_Pausing that pauses or resumes the game."
    },
    {
        "name": "Get_Screen_Shot",
        "code": "def Get_Screen_Shot(action) -> tuple[str]:\n    \"\"\"\n    Capture a complete screenshot of the game, including the scenery and UI.\n        action: string, \"Get_Screen_Shot\"\n    Return:\n        status: string, \"ok\" or \"error\"\n        message: string, succeed: \"success\"; failed: error message\n        screen_shot_base64: string, base64 encoding of a png image.\n    \"\"\"\n\n    data = {\n        \"action\": \"Get_Screen_Shot\"\n    }\n\n    game_api.send(data)",
        "code_description": "This code defines a function called Get_Screen_Shot that captures a complete screenshot of the game, including the scenery and UI."
    },
    {
        "name": "Select_Zone",
        "code": "def Select_Zone(action, start_pos_x, start_pos_z, end_pos_x, end_pos_z, zone_type) -> tuple[str]:\n    \"\"\"\n    Specify the zone type and diagonal coordinate of the rectangle, and set the zone type of the selected area\n        action: string, \"Select_Zone\"\n        start_pos_x: float, x coordinate of the starting point of the rectangle\n        start_pos_z: float, ~\n        end_pos_x: float, ~\n        end_pos_z: float, ~\n        zone_type: int, zone type to be set, 0: unzoned, 1: distant, 2: residential low, 3: residential high, 4: commercial low, 5: commercial high, 6: industrial, 7: office\n    Return:\n        status: string, \"ok\" or \"error\"\n        message: string, succeed: \"success\"; failed: error message\n    \"\"\"\n\n    data = {\n        \"action\": \"Select_Zone\",\n        \"start_pos_x\": 0,\n        \"start_pos_z\": 0,\n        \"end_pos_x\": 100,\n        \"end_pos_z\": 100,\n        \"zone_type\": 2\n    }\n\n    game_api.send(data)",
        "code_description": "This code defines a function called Select_Zone that specifies the zone type and diagonal coordinate of the rectangle, and sets the zone type of the selected area."
    }
]
